ftag.labels
===========

.. py:module:: ftag.labels


Classes
-------

.. autoapisummary::

   ftag.labels.Label
   ftag.labels.LabelContainer


Functions
---------

.. autoapisummary::

   ftag.labels.remove_suffix


Module Contents
---------------

.. py:function:: remove_suffix(string: str, suffix: str) -> str

   Remove the suffix from a string.

   :param string: String from which the suffix is to be removed
   :type string: str
   :param suffix: Suffix to remove
   :type suffix: str

   :returns: String with the suffix removed
   :rtype: str


.. py:class:: Label

   Dataclass to hold info about one flavour/label.

   .. attribute:: name

      Name of the flavour/label

      :type: str

   .. attribute:: label

      Plot label for this flavour/label

      :type: str

   .. attribute:: cuts

      Cuts of this flavour/label

      :type: Cuts

   .. attribute:: colour

      Colour of this flavour/label

      :type: str

   .. attribute:: category

      Flavour category, to which this flavour/label belongs

      :type: str


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: label
      :type:  str


   .. py:attribute:: cuts
      :type:  ftag.cuts.Cuts


   .. py:attribute:: colour
      :type:  str


   .. py:attribute:: category
      :type:  str


   .. py:attribute:: _px
      :type:  str | None
      :value: None



   .. py:property:: px
      :type: str



   .. py:property:: eff_str
      :type: str



   .. py:property:: rej_str
      :type: str



   .. py:property:: frac_str
      :type: str



   .. py:method:: __str__() -> str


   .. py:method:: __lt__(other) -> bool


.. py:class:: LabelContainer

   Label container that holds multiple labels.

   .. attribute:: labels

      Dict with the labels this container will hold

      :type: dict[str, Label]


   .. py:attribute:: labels
      :type:  dict[str, Label]


   .. py:method:: __iter__() -> collections.abc.Iterator


   .. py:method:: __getitem__(key) -> Label


   .. py:method:: __len__() -> int


   .. py:method:: __getattr__(name) -> Label


   .. py:method:: __contains__(label: str | Label) -> bool


   .. py:method:: __eq__(other) -> bool


   .. py:method:: __repr__() -> str


   .. py:property:: categories
      :type: list[str]



   .. py:method:: by_category(category: str) -> LabelContainer


   .. py:method:: from_cuts(cuts: list | ftag.cuts.Cuts) -> Label


   .. py:method:: from_yaml(yaml_path: pathlib.Path | None = None, include_categories: collections.abc.Iterable[str] | None = None, exclude_categories: collections.abc.Iterable[str] | None = None) -> LabelContainer
      :classmethod:



   .. py:method:: from_list(labels: list[Label]) -> LabelContainer
      :classmethod:



   .. py:method:: backgrounds(signal: Label, only_signals: bool = True) -> LabelContainer


