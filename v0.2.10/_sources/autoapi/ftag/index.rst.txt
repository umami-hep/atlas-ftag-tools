ftag
====

.. py:module:: ftag

.. autoapi-nested-parse::

   atlas-ftag-tools - Common tools for ATLAS flavour tagging software.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/ftag/cli_utils/index
   /autoapi/ftag/cuts/index
   /autoapi/ftag/flavours/index
   /autoapi/ftag/fraction_optimization/index
   /autoapi/ftag/git_check/index
   /autoapi/ftag/hdf5/index
   /autoapi/ftag/labeller/index
   /autoapi/ftag/mock/index
   /autoapi/ftag/region/index
   /autoapi/ftag/sample/index
   /autoapi/ftag/track_selector/index
   /autoapi/ftag/transform/index
   /autoapi/ftag/utils/index
   /autoapi/ftag/vds/index
   /autoapi/ftag/working_points/index


Attributes
----------

.. autoapisummary::

   ftag.__version__
   ftag.Flavours


Classes
-------

.. autoapisummary::

   ftag.Cuts
   ftag.Labeller
   ftag.Sample
   ftag.Transform


Functions
---------

.. autoapisummary::

   ftag.calculate_best_fraction_values
   ftag.get_mock_file


Package Contents
----------------

.. py:data:: __version__
   :value: 'v0.2.10'


.. py:class:: Cuts

   .. py:attribute:: cuts
      :type:  tuple[Cut, Ellipsis]


   .. py:method:: from_list(cuts: list) -> Cuts
      :classmethod:



   .. py:method:: empty() -> Cuts
      :classmethod:



   .. py:method:: __post_init__()


   .. py:property:: variables
      :type: list[str]



   .. py:method:: ignore(variables: list[str])


   .. py:method:: __call__(array: numpy.ndarray) -> CutsResult


   .. py:method:: __add__(other: Cuts)


   .. py:method:: __len__() -> int


   .. py:method:: __iter__() -> collections.abc.Iterator


   .. py:method:: __getitem__(variable)


   .. py:method:: __repr__() -> str


.. py:data:: Flavours

.. py:function:: calculate_best_fraction_values(jets: numpy.ndarray, tagger: str, signal: ftag.labels.Label, flavours: ftag.labels.LabelContainer, working_point: float, rejection_weights: dict | None = None, optimizer_method: str = 'Powell') -> dict

.. py:class:: Labeller

   Defines a labelling scheme.

   Classes are assigned integer labels in [0, ..., n] based on pre-defined selections.

   :param labels: The labels to be use.
   :type labels: LabelContainer | list[str | Label]
   :param require_labels: Whether to require that all objects are labelled.
   :type require_labels: bool


   .. py:attribute:: labels
      :type:  ftag.labels.LabelContainer | list[str | ftag.labels.Label]


   .. py:attribute:: require_labels
      :type:  bool
      :value: True



   .. py:method:: __post_init__() -> None


   .. py:property:: variables
      :type: list[str]


      Returns the variables used for labelling.

      :returns: The variables used for labelling.
      :rtype: list[str]


   .. py:method:: get_labels(array: numpy.ndarray) -> numpy.ndarray

      Returns the labels for the given array.

      :param array: The array to label.
      :type array: np.ndarray

      :returns: The labels for the given array.
      :rtype: np.ndarray

      :raises ValueError: If the `require_labels` attribute is set to `True` and some objects were not labelled.



   .. py:method:: add_labels(array: numpy.ndarray, label_name: str = 'labels') -> numpy.ndarray

      Adds the labels to the given array.

      :param array: The array to label.
      :type array: np.ndarray
      :param label_name: The name of the label column.
      :type label_name: str

      :returns: The array with the labels added.
      :rtype: np.ndarray

      :raises ValueError: If the `require_labels` attribute is set to `False`.



.. py:function:: get_mock_file(num_jets=1000, fname: str | None = None, tracks_name: str = 'tracks', num_tracks: int = 40) -> tuple[str, h5py.File]

.. py:class:: Sample

   .. py:attribute:: pattern
      :type:  pathlib.Path | str | tuple[pathlib.Path | str, Ellipsis]


   .. py:attribute:: ntuple_dir
      :type:  pathlib.Path | str | None
      :value: None



   .. py:attribute:: name
      :type:  str | None
      :value: None



   .. py:attribute:: weights
      :type:  list[float] | None
      :value: None



   .. py:method:: __post_init__() -> None


   .. py:property:: path
      :type: tuple[pathlib.Path, Ellipsis]



   .. py:property:: files
      :type: list[str]



   .. py:property:: num_files
      :type: int



   .. py:property:: dsid
      :type: list[str]



   .. py:property:: sample_id
      :type: list[str]



   .. py:property:: tags
      :type: list[str]



   .. py:property:: ptag
      :type: list[str]



   .. py:property:: rtag
      :type: list[str]



   .. py:property:: dumper_tag
      :type: list[str]



   .. py:method:: virtual_file(**kwargs) -> list[pathlib.Path | str]


   .. py:method:: __str__()


   .. py:method:: __lt__(other)


   .. py:method:: __eq__(other)


.. py:class:: Transform

   .. py:attribute:: variable_map
      :type:  dict[str, dict[str, str]] | None
      :value: None



   .. py:attribute:: ints_map
      :type:  dict[str, dict[str, dict[int, int]]] | None
      :value: None



   .. py:attribute:: floats_map
      :type:  dict[str, dict[str, str | Callable]] | None
      :value: None



   .. py:method:: __post_init__()


   .. py:method:: __call__(batch: Batch) -> Batch


   .. py:method:: map_variables(batch: Batch) -> Batch

      Rename variables in a batch of data.

      :param batch: Dict of structured numpy arrays.
      :type batch: Batch

      :returns: Dict of structured numpy arrays with renamed variables.
      :rtype: Batch



   .. py:method:: map_ints(batch: Batch) -> Batch

      Map integer values to new values.

      :param batch: Dict of structured numpy arrays.
      :type batch: Batch

      :returns: Dict of structured numpy arrays with mapped integer values.
      :rtype: Batch



   .. py:method:: map_floats(batch: Batch) -> Batch

      Transform float values.

      :param batch: Dict of structured numpy arrays.
      :type batch: Batch

      :returns: Dict of structured numpy arrays with transformed float values.
      :rtype: Batch



   .. py:method:: map_dtype(name: str, dtype: numpy.dtype) -> numpy.dtype


   .. py:method:: map_variable_names(name: str, variables: list[str], inverse=False) -> list[str]


